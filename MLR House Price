# Importing necessary libraries
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

# Reading the datasets
house_train  = pd.read_csv('wk3_kc_house_train_data.csv')
house_test   = pd.read_csv('wk3_kc_house_test_data.csv')
house_valid  = pd.read_csv('wk3_kc_house_valid_data.csv')


#Univariate analysis of bedrooms
plt.hist(house_train['bedrooms'], bins=50, color='orange')
plt.title('Histogram of Bedrooms')
plt.xlabel('Number of Bedrooms')
plt.ylabel('Number of Houses')

var = 'bedrooms'
data = pd.concat([house_train['price'], house_train[var]], axis=1)
f, ax = plt.subplots(figsize=(14, 6))
fig = sns.boxplot(x=var, y="price", data=data)
fig.axis(ymin=0, ymax=3500000)


#Univariate analysis of bathrooms
plt.hist(house_train['bathrooms'], bins=100, color='orange')
plt.title('Histogram of bathrooms')
plt.xlabel('Number of bathrooms')
plt.ylabel('Number of Houses')


var = 'zipcode'
data = pd.concat([house_train['price'], house_train[var]], axis=1)
f, ax = plt.subplots(figsize=(10, 10))
fig = sns.boxplot(x=var, y="price", data=data)
fig.axis(ymin=0, ymax=3500000)


# Univariate analysis of predictor 'sqft_living'
plt.hist(house_train['sqft_living'], bins=50, color='orange')
plt.title('Histogram of Sqft_living')
plt.xlabel('Sqft_living')
plt.ylabel('Number of Houses')

print('Skewness: %f' % house_test['sqft_living'].skew())
print('Kurtosis: %f' % house_test['sqft_living'].kurt())


# Univariate Analysis of the target variable 'price'
plt.hist(house_train['price'], bins = 50, color= 'orange')
plt.title('Histogram of Price')
plt.xlabel('Price of Houses')
plt.ylabel('Number of Houses')


# Univariate on Sqft Living
house_train.sqft_living.describe()

#Scatterplot of Sqft_livng vs Price
plt.scatter(house_train['sqft_living'],house_train['price'], alpha=0.6, edgecolors= 'black')
plt.title('Scatterplot of  Sqft_living vs Price',)
plt.xlabel('sqft_living')
plt.ylabel('price')


plt.scatter(house_train['grade'],house_train['price'], alpha=0.6, edgecolors= 'black')
plt.title('Scatterplot of  grade vs Price',)
plt.xlabel('grade')
plt.ylabel('price')


var = 'grade'
data = pd.concat([house_train['price'], house_train[var]], axis=1)
f, ax = plt.subplots(figsize=(8, 6))
fig = sns.boxplot(x=var, y="price", data=data)
fig.axis(ymin=0, ymax=3500000);


# Findind correlation co-efficient of predictors with the target.
plt.subplots(figsize=(10,10))
sns.heatmap(house_train.corr(), annot=True, cmap=sns.diverging_palette(220, 10, as_cmap=True))

#Indicate presence or absence of basement
len(house_train.loc[house_train['sqft_basement']==0])/len(house_train)
house_train['sqft_basement'] = house_train['sqft_basement'].map(lambda x: 1 if x>0 else x)

len(house_valid.loc[house_valid['sqft_basement']==0])/len(house_valid)
house_valid['sqft_basement'] = house_valid['sqft_basement'].map(lambda x: 1 if x>0 else x)

len(house_test.loc[house_test['sqft_basement']==0])/len(house_test)
house_test['sqft_basement'] = house_test['sqft_basement'].map(lambda x: 1 if x>0 else x)

#Log transformation
# On Training data(Target)
house_train['log_price'] = np.log(house_train['price'])
house_train.hist(column='log_price', bins=50, grid=False)

# On Training data(Predictor)
house_train['log_sqft_above'] = np.log(house_train['sqft_above'])
house_train.hist(column='log_sqft_above', bins=50, grid=False)

# On Validation data(Predictor)
house_valid['log_sqft_above'] = np.log(house_valid['sqft_above'])
house_valid.hist(column='log_sqft_above', bins=50, grid=False)

# On Training data(Predictor)
house_train['log_sqft_living15'] = np.log(house_train['sqft_living15'])
house_train.hist(column='log_sqft_living15', bins=50, grid=False)

# On Validation data(Predictor)
house_valid['log_sqft_living15'] = np.log(house_valid['sqft_living15'])
house_valid.hist(column='log_sqft_living15', bins=50, grid=False)

# On Test data(Predictor)
house_test['log_sqft_living15'] = np.log(house_test['sqft_living15'])
house_test.hist(column='log_sqft_living15', bins=50, grid=False)

# On Training data(Predictor)
house_train['log_sqft_living'] = np.log(house_train['sqft_living'])
house_train.hist(column='log_sqft_living', bins=50, grid=False)

# On Validation data(Target)
house_valid['log_price'] = np.log(house_valid['price'])
house_valid.hist(column='log_price',bins=50, grid=False)

# On Validation data(Predictor)
house_valid['log_sqft_living'] = np.log(house_valid['sqft_living'])
house_valid.hist(column='log_sqft_living', bins=50, grid=False)

# On Test data(Target)
house_test['log_price'] = np.log(house_test['price'])
house_test.hist(column='log_price',bins=50, grid=False)

# On Test data(Predictor)
house_test['log_sqft_living'] = np.log(house_test['sqft_living'])
house_test.hist(column='log_sqft_living', bins=50, grid=False)


#Linear regression on training data
x_train= house_train[['waterfront','grade','view','sqft_basement','log_sqft_living','log_sqft_above','log_sqft_living15']]
y_train= house_train[['log_price']]

lin_reg=LinearRegression()
lin_reg.fit(x_train, y_train)
y_pred_train = lin_reg.predict(x_train)
y_pred_train_alog = np.exp(y_pred_train)
y_pred_train_alog

y_train_alog = np.exp(y_train)
y_train_alog

#MLR on Validation data
x_valid= house_valid[['waterfront','grade','view','sqft_basement','log_sqft_living','log_sqft_above','log_sqft_living15']]
y_valid = house_valid['log_price']

y_pred_val= lin_reg.predict(x_valid)
y_pred_val_alog = np.exp(y_pred_val)
y_pred_val_alog
y_val_alog = np.exp(y_valid)
y_val_alog

#R2 for validation data
R2_valid = r2_score(y_val_alog,y_pred_val_alog)

#MSE for validation
MSE_val= mean_squared_error(y_val_alog,y_pred_val_alog)
print('MSE for Training data : ', MSE_val)
print('R2 for Validation Data : ', R2_valid)

#RMSE for validation
RMSE_valid= np.sqrt((MSE_val))
print('RMSE for Training data : ', RMSE_valid)

#MLR on test data
x_test= house_test[['waterfront','grade','view','sqft_basement','log_sqft_living','log_sqft_above','log_sqft_living15']]
y_test = house_test['log_price']

y_pred_test= lin_reg.predict(x_test)

y_pred_test_alog = np.exp(y_pred_test)
y_pred_test_alog

y_test_alog = np.exp(y_test)
y_test_alog

#R2 for test data
R2_test= r2_score(y_test_alog,y_pred_test_alog)
print('R2 for Training Data : ', R2_test)

#MSE for test data
MSE_test= mean_squared_error(y_test_alog,y_pred_test_alog)
print('MSE for Training data : ', MSE_test)

#RMSE for test data
RMSE_test= np.sqrt((MSE_test))
print('RMSE for Training data : ', RMSE_test)
